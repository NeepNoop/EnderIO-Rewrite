buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version "${shadow_version}"
}

subprojects {
    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'org.parchmentmc.librarian.forgegradle'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.johnrengelman.shadow'

    def enableMixin = false
    if (project.hasProperty("enable_mixin"))
        enableMixin = project.enable_mixin

    // MixinGradle:
    if (enableMixin)
        apply plugin: 'org.spongepowered.mixin'

    version = '1.0'
    group = 'com.enderio'
    archivesBaseName = getArchiveBaseName(project)
    def modId = getModId(project)

    // Mojang ships Java 16 to end users in 1.17+ instead of Java 8 in 1.16 or lower, so your mod should target Java 16.
    java.toolchain.languageVersion = JavaLanguageVersion.of(16)

    println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
    minecraft {
//        mappings channel: 'official', version: "${minecraft_version}"
        mappings channel: 'parchment', version: "${mappings_version}-${minecraft_version}"

        // TODO: Discuss: Do we still want to avoid ATs?
        // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

        // Default run configurations.
        runs {
            client {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'REGISTRIES'
                property 'forge.logging.console.level', 'debug'

                // Allow dependent mixins to run
                property 'mixin.env.remapRefMap', 'true'
                property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

                mods {
                    // TODO: Dynamic names??
                    examplemod {
                        source sourceSets.main
                    }
                }
            }

            server {
                workingDirectory project.file('run')

                property 'forge.logging.console.level', 'debug'

                // Allow dependent mixins to run
                property 'mixin.env.remapRefMap', 'true'
                property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

                mods {
                    // TODO: Dynamic names??
                    examplemod {
                        source sourceSets.main
                    }
                }
            }

            data {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'REGISTRIES'
                property 'forge.logging.console.level', 'debug'

                // Allow dependent mixins to run
                property 'mixin.env.remapRefMap', 'true'
                property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

                // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
                args '--mod', modId, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

                mods {
                    // TODO: Dynamic names??
                    examplemod {
                        source sourceSets.main
                    }
                }
            }
        }
    }

    // TEMP
//    configurations {
//        library
//        implementation.extendsFrom library
////        shade.extendsFrom library
//    }
//    minecraft.runs.all {
//        lazyToken('minecraft_classpath') {
//            configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
//        }
//    }

    // Include resources generated by data generators.
    sourceSets.main.resources { srcDir 'src/generated/resources' }

    repositories {
        // Registrate
        maven {
            url "https://maven.tterrag.com/"
        }

//        maven { // Rover's temp maven.
//            url "https://maven.nerdthings.dev/"
//        }

        // Cloth config.
        maven { url "https://maven.shedaniel.me/" }

        mavenLocal()
    }

//    configurations {
//        shade.extendsFrom library
//    }

    dependencies {
        minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

//        def registrate = "com.tterrag.registrate:Registrate:MC${minecraft_version}-${registrate_version}"
//        implementation fg.deobf(registrate)
//        shade registrate

        implementation (fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}"))

        // Apply Mixin AP
        if (enableMixin)
            annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
    }

    if (enableMixin) {
        mixin {
            // MixinGradle Settings
            add sourceSets.main, "mixins.${modId}.refmap.json"
            config "mixins.${modId}.json"
        }
    }

    // Example for how to get properties into the manifest for reading at runtime.
    jar {
        manifest {
            attributes([
                    "Specification-Title"     : "examplemod",
                    "Specification-Vendor"    : "examplemodsareus",
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : "examplemodsareus",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

//    shadowJar {
//        configurations = [project.configurations.shade]
//        relocate 'com.tterrag.registrate', 'com.enderio.repack.registrate'
//    }
//
//    reobf {
//        shadowJar {}
//    }

    // Example configuration to allow publishing using the maven-publish plugin
    // This is the preferred method to reobfuscate your jar file
//    jar.finalizedBy('reobfJar')
    // However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
     publish.dependsOn('reobfJar')

    // Someone else can do this; I still don't understand it well enough
//    publishing {
//        publications {
//            mavenJava(MavenPublication) {
//                artifact jar
//            }
//        }
//        repositories {
//            maven {
//                url "file://${project.projectDir}/mcmodsrepo"
//            }
//        }
//    }

}

// region Versioning

String getPrettyName(Project proj) {
    def project_base_name = rootProject.name
    if (proj.hasProperty('module_name'))
        project_base_name += "-${proj.module_name}"
    return project_base_name
}

String getArchiveBaseName(Project proj) {
    return getPrettyName(proj) + "-${project.minecraft_version}"
}

String getModId(Project proj) {
    // Replaces enderiobase with enderio for the purposes of the dummy. TODO: Review the dummy...
    return proj.name.replaceAll('-', '').replaceAll('enderiobase', 'enderio');
}

// endregion
